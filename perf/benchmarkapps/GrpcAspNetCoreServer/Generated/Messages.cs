// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: messages.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using Google.Protobuf;
using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Grpc.Testing
{

    /// <summary>Holder for reflection information generated from messages.proto</summary>
    public static partial class MessagesReflection
    {

        #region Descriptor
        /// <summary>File descriptor for messages.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static MessagesReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "Cg5tZXNzYWdlcy5wcm90bxIMZ3JwYy50ZXN0aW5nIhoKCUJvb2xWYWx1ZRIN",
                  "CgV2YWx1ZRgBIAEoCCJACgdQYXlsb2FkEicKBHR5cGUYASABKA4yGS5ncnBj",
                  "LnRlc3RpbmcuUGF5bG9hZFR5cGUSDAoEYm9keRgCIAEoDCIrCgpFY2hvU3Rh",
                  "dHVzEgwKBGNvZGUYASABKAUSDwoHbWVzc2FnZRgCIAEoCSKGAwoNU2ltcGxl",
                  "UmVxdWVzdBIwCg1yZXNwb25zZV90eXBlGAEgASgOMhkuZ3JwYy50ZXN0aW5n",
                  "LlBheWxvYWRUeXBlEhUKDXJlc3BvbnNlX3NpemUYAiABKAUSJgoHcGF5bG9h",
                  "ZBgDIAEoCzIVLmdycGMudGVzdGluZy5QYXlsb2FkEhUKDWZpbGxfdXNlcm5h",
                  "bWUYBCABKAgSGAoQZmlsbF9vYXV0aF9zY29wZRgFIAEoCBI0ChNyZXNwb25z",
                  "ZV9jb21wcmVzc2VkGAYgASgLMhcuZ3JwYy50ZXN0aW5nLkJvb2xWYWx1ZRIx",
                  "Cg9yZXNwb25zZV9zdGF0dXMYByABKAsyGC5ncnBjLnRlc3RpbmcuRWNob1N0",
                  "YXR1cxIyChFleHBlY3RfY29tcHJlc3NlZBgIIAEoCzIXLmdycGMudGVzdGlu",
                  "Zy5Cb29sVmFsdWUSFgoOZmlsbF9zZXJ2ZXJfaWQYCSABKAgSHgoWZmlsbF9n",
                  "cnBjbGJfcm91dGVfdHlwZRgKIAEoCCKsAQoOU2ltcGxlUmVzcG9uc2USJgoH",
                  "cGF5bG9hZBgBIAEoCzIVLmdycGMudGVzdGluZy5QYXlsb2FkEhAKCHVzZXJu",
                  "YW1lGAIgASgJEhMKC29hdXRoX3Njb3BlGAMgASgJEhEKCXNlcnZlcl9pZBgE",
                  "IAEoCRI4ChFncnBjbGJfcm91dGVfdHlwZRgFIAEoDjIdLmdycGMudGVzdGlu",
                  "Zy5HcnBjbGJSb3V0ZVR5cGUqHwoLUGF5bG9hZFR5cGUSEAoMQ09NUFJFU1NB",
                  "QkxFEAAqbwoPR3JwY2xiUm91dGVUeXBlEh0KGUdSUENMQl9ST1VURV9UWVBF",
                  "X1VOS05PV04QABIeChpHUlBDTEJfUk9VVEVfVFlQRV9GQUxMQkFDSxABEh0K",
                  "GUdSUENMQl9ST1VURV9UWVBFX0JBQ0tFTkQQAmIGcHJvdG8z"));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(new[] { typeof(global::Grpc.Testing.PayloadType), typeof(global::Grpc.Testing.GrpclbRouteType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.Testing.BoolValue), global::Grpc.Testing.BoolValue.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.Testing.Payload), global::Grpc.Testing.Payload.Parser, new[]{ "Type", "Body" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.Testing.EchoStatus), global::Grpc.Testing.EchoStatus.Parser, new[]{ "Code", "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.Testing.SimpleRequest), global::Grpc.Testing.SimpleRequest.Parser, new[]{ "ResponseType", "ResponseSize", "Payload", "FillUsername", "FillOauthScope", "ResponseCompressed", "ResponseStatus", "ExpectCompressed", "FillServerId", "FillGrpclbRouteType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.Testing.SimpleResponse), global::Grpc.Testing.SimpleResponse.Parser, new[]{ "Payload", "Username", "OauthScope", "ServerId", "GrpclbRouteType" }, null, null, null, null)
                }));
        }
        #endregion

    }
    #region Enums
    /// <summary>
    /// The type of payload that should be returned.
    /// </summary>
    public enum PayloadType
    {
        /// <summary>
        /// Compressable text format.
        /// </summary>
        [pbr::OriginalName("COMPRESSABLE")] Compressable = 0,
    }

    /// <summary>
    /// The type of route that a client took to reach a server w.r.t. gRPCLB.
    /// The server must fill in "fallback" if it detects that the RPC reached
    /// the server via the "gRPCLB fallback" path, and "backend" if it detects
    /// that the RPC reached the server via "gRPCLB backend" path (i.e. if it got
    /// the address of this server from the gRPCLB server BalanceLoad RPC). Exactly
    /// how this detection is done is context and server dependant.
    /// </summary>
    public enum GrpclbRouteType
    {
        /// <summary>
        /// Server didn't detect the route that a client took to reach it.
        /// </summary>
        [pbr::OriginalName("GRPCLB_ROUTE_TYPE_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Indicates that a client reached a server via gRPCLB fallback.
        /// </summary>
        [pbr::OriginalName("GRPCLB_ROUTE_TYPE_FALLBACK")] Fallback = 1,
        /// <summary>
        /// Indicates that a client reached a server as a gRPCLB-given backend.
        /// </summary>
        [pbr::OriginalName("GRPCLB_ROUTE_TYPE_BACKEND")] Backend = 2,
    }

    #endregion

    #region Messages
    /// <summary>
    /// TODO(dgq): Go back to using well-known types once
    /// https://github.com/grpc/grpc/issues/6980 has been fixed.
    /// import "google/protobuf/wrappers.proto";
    /// </summary>
    public sealed partial class BoolValue : pb::IMessage<BoolValue>, pb::IBufferMessage
    {
        private static readonly pb::MessageParser<BoolValue> _parser = new pb::MessageParser<BoolValue>(() => new BoolValue());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BoolValue> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Grpc.Testing.MessagesReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BoolValue()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BoolValue(BoolValue other) : this()
        {
            value_ = other.value_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BoolValue Clone()
        {
            return new BoolValue(this);
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 1;
        private bool value_;
        /// <summary>
        /// The bool value.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Value
        {
            get { return value_; }
            set
            {
                value_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as BoolValue);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BoolValue other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Value != other.Value) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Value != false) hash ^= Value.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Value != false)
            {
                output.WriteRawTag(8);
                output.WriteBool(Value);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        public void WriteTo(ref CodedOutputWriter output)
        {
            if (Value != false)
            {
                output.WriteRawTag(8);
                output.WriteBool(Value);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(ref output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Value != false)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BoolValue other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Value != false)
            {
                Value = other.Value;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Value = input.ReadBool();
                            break;
                        }
                }
            }
        }

        public void MergeFrom(ref CodedInputReader input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                    case 8:
                        {
                            Value = input.ReadBool();
                            break;
                        }
                }
            }
        }
    }

    /// <summary>
    /// A block of data, to simply increase gRPC message size.
    /// </summary>
    public sealed partial class Payload : pb::IMessage<Payload>, pb::IBufferMessage
    {
        private static readonly pb::MessageParser<Payload> _parser = new pb::MessageParser<Payload>(() => new Payload());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Payload> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Grpc.Testing.MessagesReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Payload()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Payload(Payload other) : this()
        {
            type_ = other.type_;
            body_ = other.body_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Payload Clone()
        {
            return new Payload(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Grpc.Testing.PayloadType type_ = global::Grpc.Testing.PayloadType.Compressable;
        /// <summary>
        /// The type of data in body.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Grpc.Testing.PayloadType Type
        {
            get { return type_; }
            set
            {
                type_ = value;
            }
        }

        /// <summary>Field number for the "body" field.</summary>
        public const int BodyFieldNumber = 2;
        private pb::ByteString body_ = pb::ByteString.Empty;
        /// <summary>
        /// Primary contents of payload.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Body
        {
            get { return body_; }
            set
            {
                body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Payload);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Payload other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Type != other.Type) return false;
            if (Body != other.Body) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Type != global::Grpc.Testing.PayloadType.Compressable) hash ^= Type.GetHashCode();
            if (Body.Length != 0) hash ^= Body.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Type != global::Grpc.Testing.PayloadType.Compressable)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Type);
            }
            if (Body.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteBytes(Body);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        public void WriteTo(ref CodedOutputWriter output)
        {
            if (Type != global::Grpc.Testing.PayloadType.Compressable)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Type);
            }
            if (Body.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteBytes(Body);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(ref output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Type != global::Grpc.Testing.PayloadType.Compressable)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (Body.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Body);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Payload other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Type != global::Grpc.Testing.PayloadType.Compressable)
            {
                Type = other.Type;
            }
            if (other.Body.Length != 0)
            {
                Body = other.Body;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Type = (global::Grpc.Testing.PayloadType)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            Body = input.ReadBytes();
                            break;
                        }
                }
            }
        }

        public void MergeFrom(ref CodedInputReader input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                    case 8:
                        {
                            Type = (global::Grpc.Testing.PayloadType)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            Body = input.ReadBytes();
                            break;
                        }
                }
            }
        }
    }

    /// <summary>
    /// A protobuf representation for grpc status. This is used by test
    /// clients to specify a status that the server should attempt to return.
    /// </summary>
    public sealed partial class EchoStatus : pb::IMessage<EchoStatus>, pb::IBufferMessage
    {
        private static readonly pb::MessageParser<EchoStatus> _parser = new pb::MessageParser<EchoStatus>(() => new EchoStatus());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EchoStatus> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Grpc.Testing.MessagesReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EchoStatus()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EchoStatus(EchoStatus other) : this()
        {
            code_ = other.code_;
            message_ = other.message_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EchoStatus Clone()
        {
            return new EchoStatus(this);
        }

        /// <summary>Field number for the "code" field.</summary>
        public const int CodeFieldNumber = 1;
        private int code_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Code
        {
            get { return code_; }
            set
            {
                code_ = value;
            }
        }

        /// <summary>Field number for the "message" field.</summary>
        public const int MessageFieldNumber = 2;
        private string message_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Message
        {
            get { return message_; }
            set
            {
                message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as EchoStatus);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EchoStatus other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Code != other.Code) return false;
            if (Message != other.Message) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Code != 0) hash ^= Code.GetHashCode();
            if (Message.Length != 0) hash ^= Message.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Code != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(Code);
            }
            if (Message.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Message);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        public void WriteTo(ref CodedOutputWriter output)
        {
            if (Code != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(Code);
            }
            if (Message.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Message);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(ref output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Code != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
            }
            if (Message.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EchoStatus other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Code != 0)
            {
                Code = other.Code;
            }
            if (other.Message.Length != 0)
            {
                Message = other.Message;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Code = input.ReadInt32();
                            break;
                        }
                    case 18:
                        {
                            Message = input.ReadString();
                            break;
                        }
                }
            }
        }

        public void MergeFrom(ref CodedInputReader input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                    case 8:
                        {
                            Code = input.ReadInt32();
                            break;
                        }
                    case 18:
                        {
                            Message = input.ReadString();
                            break;
                        }
                }
            }
        }
    }

    /// <summary>
    /// Unary request.
    /// </summary>
    public sealed partial class SimpleRequest : pb::IMessage<SimpleRequest>, pb::IBufferMessage
    {
        private static readonly pb::MessageParser<SimpleRequest> _parser = new pb::MessageParser<SimpleRequest>(() => new SimpleRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SimpleRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Grpc.Testing.MessagesReflection.Descriptor.MessageTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SimpleRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SimpleRequest(SimpleRequest other) : this()
        {
            responseType_ = other.responseType_;
            responseSize_ = other.responseSize_;
            payload_ = other.payload_ != null ? other.payload_.Clone() : null;
            fillUsername_ = other.fillUsername_;
            fillOauthScope_ = other.fillOauthScope_;
            responseCompressed_ = other.responseCompressed_ != null ? other.responseCompressed_.Clone() : null;
            responseStatus_ = other.responseStatus_ != null ? other.responseStatus_.Clone() : null;
            expectCompressed_ = other.expectCompressed_ != null ? other.expectCompressed_.Clone() : null;
            fillServerId_ = other.fillServerId_;
            fillGrpclbRouteType_ = other.fillGrpclbRouteType_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SimpleRequest Clone()
        {
            return new SimpleRequest(this);
        }

        /// <summary>Field number for the "response_type" field.</summary>
        public const int ResponseTypeFieldNumber = 1;
        private global::Grpc.Testing.PayloadType responseType_ = global::Grpc.Testing.PayloadType.Compressable;
        /// <summary>
        /// Desired payload type in the response from the server.
        /// If response_type is RANDOM, server randomly chooses one from other formats.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Grpc.Testing.PayloadType ResponseType
        {
            get { return responseType_; }
            set
            {
                responseType_ = value;
            }
        }

        /// <summary>Field number for the "response_size" field.</summary>
        public const int ResponseSizeFieldNumber = 2;
        private int responseSize_;
        /// <summary>
        /// Desired payload size in the response from the server.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ResponseSize
        {
            get { return responseSize_; }
            set
            {
                responseSize_ = value;
            }
        }

        /// <summary>Field number for the "payload" field.</summary>
        public const int PayloadFieldNumber = 3;
        private global::Grpc.Testing.Payload payload_;
        /// <summary>
        /// Optional input payload sent along with the request.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Grpc.Testing.Payload Payload
        {
            get { return payload_; }
            set
            {
                payload_ = value;
            }
        }

        /// <summary>Field number for the "fill_username" field.</summary>
        public const int FillUsernameFieldNumber = 4;
        private bool fillUsername_;
        /// <summary>
        /// Whether SimpleResponse should include username.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool FillUsername
        {
            get { return fillUsername_; }
            set
            {
                fillUsername_ = value;
            }
        }

        /// <summary>Field number for the "fill_oauth_scope" field.</summary>
        public const int FillOauthScopeFieldNumber = 5;
        private bool fillOauthScope_;
        /// <summary>
        /// Whether SimpleResponse should include OAuth scope.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool FillOauthScope
        {
            get { return fillOauthScope_; }
            set
            {
                fillOauthScope_ = value;
            }
        }

        /// <summary>Field number for the "response_compressed" field.</summary>
        public const int ResponseCompressedFieldNumber = 6;
        private global::Grpc.Testing.BoolValue responseCompressed_;
        /// <summary>
        /// Whether to request the server to compress the response. This field is
        /// "nullable" in order to interoperate seamlessly with clients not able to
        /// implement the full compression tests by introspecting the call to verify
        /// the response's compression status.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Grpc.Testing.BoolValue ResponseCompressed
        {
            get { return responseCompressed_; }
            set
            {
                responseCompressed_ = value;
            }
        }

        /// <summary>Field number for the "response_status" field.</summary>
        public const int ResponseStatusFieldNumber = 7;
        private global::Grpc.Testing.EchoStatus responseStatus_;
        /// <summary>
        /// Whether server should return a given status
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Grpc.Testing.EchoStatus ResponseStatus
        {
            get { return responseStatus_; }
            set
            {
                responseStatus_ = value;
            }
        }

        /// <summary>Field number for the "expect_compressed" field.</summary>
        public const int ExpectCompressedFieldNumber = 8;
        private global::Grpc.Testing.BoolValue expectCompressed_;
        /// <summary>
        /// Whether the server should expect this request to be compressed.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Grpc.Testing.BoolValue ExpectCompressed
        {
            get { return expectCompressed_; }
            set
            {
                expectCompressed_ = value;
            }
        }

        /// <summary>Field number for the "fill_server_id" field.</summary>
        public const int FillServerIdFieldNumber = 9;
        private bool fillServerId_;
        /// <summary>
        /// Whether SimpleResponse should include server_id.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool FillServerId
        {
            get { return fillServerId_; }
            set
            {
                fillServerId_ = value;
            }
        }

        /// <summary>Field number for the "fill_grpclb_route_type" field.</summary>
        public const int FillGrpclbRouteTypeFieldNumber = 10;
        private bool fillGrpclbRouteType_;
        /// <summary>
        /// Whether SimpleResponse should include grpclb_route_type.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool FillGrpclbRouteType
        {
            get { return fillGrpclbRouteType_; }
            set
            {
                fillGrpclbRouteType_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SimpleRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SimpleRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ResponseType != other.ResponseType) return false;
            if (ResponseSize != other.ResponseSize) return false;
            if (!object.Equals(Payload, other.Payload)) return false;
            if (FillUsername != other.FillUsername) return false;
            if (FillOauthScope != other.FillOauthScope) return false;
            if (!object.Equals(ResponseCompressed, other.ResponseCompressed)) return false;
            if (!object.Equals(ResponseStatus, other.ResponseStatus)) return false;
            if (!object.Equals(ExpectCompressed, other.ExpectCompressed)) return false;
            if (FillServerId != other.FillServerId) return false;
            if (FillGrpclbRouteType != other.FillGrpclbRouteType) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ResponseType != global::Grpc.Testing.PayloadType.Compressable) hash ^= ResponseType.GetHashCode();
            if (ResponseSize != 0) hash ^= ResponseSize.GetHashCode();
            if (payload_ != null) hash ^= Payload.GetHashCode();
            if (FillUsername != false) hash ^= FillUsername.GetHashCode();
            if (FillOauthScope != false) hash ^= FillOauthScope.GetHashCode();
            if (responseCompressed_ != null) hash ^= ResponseCompressed.GetHashCode();
            if (responseStatus_ != null) hash ^= ResponseStatus.GetHashCode();
            if (expectCompressed_ != null) hash ^= ExpectCompressed.GetHashCode();
            if (FillServerId != false) hash ^= FillServerId.GetHashCode();
            if (FillGrpclbRouteType != false) hash ^= FillGrpclbRouteType.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ResponseType != global::Grpc.Testing.PayloadType.Compressable)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)ResponseType);
            }
            if (ResponseSize != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(ResponseSize);
            }
            if (payload_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Payload);
            }
            if (FillUsername != false)
            {
                output.WriteRawTag(32);
                output.WriteBool(FillUsername);
            }
            if (FillOauthScope != false)
            {
                output.WriteRawTag(40);
                output.WriteBool(FillOauthScope);
            }
            if (responseCompressed_ != null)
            {
                output.WriteRawTag(50);
                output.WriteMessage(ResponseCompressed);
            }
            if (responseStatus_ != null)
            {
                output.WriteRawTag(58);
                output.WriteMessage(ResponseStatus);
            }
            if (expectCompressed_ != null)
            {
                output.WriteRawTag(66);
                output.WriteMessage(ExpectCompressed);
            }
            if (FillServerId != false)
            {
                output.WriteRawTag(72);
                output.WriteBool(FillServerId);
            }
            if (FillGrpclbRouteType != false)
            {
                output.WriteRawTag(80);
                output.WriteBool(FillGrpclbRouteType);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        public void WriteTo(ref CodedOutputWriter output)
        {
            if (ResponseType != global::Grpc.Testing.PayloadType.Compressable)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)ResponseType);
            }
            if (ResponseSize != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(ResponseSize);
            }
            if (payload_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Payload);
            }
            if (FillUsername != false)
            {
                output.WriteRawTag(32);
                output.WriteBool(FillUsername);
            }
            if (FillOauthScope != false)
            {
                output.WriteRawTag(40);
                output.WriteBool(FillOauthScope);
            }
            if (responseCompressed_ != null)
            {
                output.WriteRawTag(50);
                output.WriteMessage(ResponseCompressed);
            }
            if (responseStatus_ != null)
            {
                output.WriteRawTag(58);
                output.WriteMessage(ResponseStatus);
            }
            if (expectCompressed_ != null)
            {
                output.WriteRawTag(66);
                output.WriteMessage(ExpectCompressed);
            }
            if (FillServerId != false)
            {
                output.WriteRawTag(72);
                output.WriteBool(FillServerId);
            }
            if (FillGrpclbRouteType != false)
            {
                output.WriteRawTag(80);
                output.WriteBool(FillGrpclbRouteType);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(ref output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ResponseType != global::Grpc.Testing.PayloadType.Compressable)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ResponseType);
            }
            if (ResponseSize != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResponseSize);
            }
            if (payload_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);
            }
            if (FillUsername != false)
            {
                size += 1 + 1;
            }
            if (FillOauthScope != false)
            {
                size += 1 + 1;
            }
            if (responseCompressed_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseCompressed);
            }
            if (responseStatus_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseStatus);
            }
            if (expectCompressed_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExpectCompressed);
            }
            if (FillServerId != false)
            {
                size += 1 + 1;
            }
            if (FillGrpclbRouteType != false)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SimpleRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ResponseType != global::Grpc.Testing.PayloadType.Compressable)
            {
                ResponseType = other.ResponseType;
            }
            if (other.ResponseSize != 0)
            {
                ResponseSize = other.ResponseSize;
            }
            if (other.payload_ != null)
            {
                if (payload_ == null)
                {
                    Payload = new global::Grpc.Testing.Payload();
                }
                Payload.MergeFrom(other.Payload);
            }
            if (other.FillUsername != false)
            {
                FillUsername = other.FillUsername;
            }
            if (other.FillOauthScope != false)
            {
                FillOauthScope = other.FillOauthScope;
            }
            if (other.responseCompressed_ != null)
            {
                if (responseCompressed_ == null)
                {
                    ResponseCompressed = new global::Grpc.Testing.BoolValue();
                }
                ResponseCompressed.MergeFrom(other.ResponseCompressed);
            }
            if (other.responseStatus_ != null)
            {
                if (responseStatus_ == null)
                {
                    ResponseStatus = new global::Grpc.Testing.EchoStatus();
                }
                ResponseStatus.MergeFrom(other.ResponseStatus);
            }
            if (other.expectCompressed_ != null)
            {
                if (expectCompressed_ == null)
                {
                    ExpectCompressed = new global::Grpc.Testing.BoolValue();
                }
                ExpectCompressed.MergeFrom(other.ExpectCompressed);
            }
            if (other.FillServerId != false)
            {
                FillServerId = other.FillServerId;
            }
            if (other.FillGrpclbRouteType != false)
            {
                FillGrpclbRouteType = other.FillGrpclbRouteType;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            ResponseType = (global::Grpc.Testing.PayloadType)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            ResponseSize = input.ReadInt32();
                            break;
                        }
                    case 26:
                        {
                            if (payload_ == null)
                            {
                                Payload = new global::Grpc.Testing.Payload();
                            }
                            input.ReadMessage(Payload);
                            break;
                        }
                    case 32:
                        {
                            FillUsername = input.ReadBool();
                            break;
                        }
                    case 40:
                        {
                            FillOauthScope = input.ReadBool();
                            break;
                        }
                    case 50:
                        {
                            if (responseCompressed_ == null)
                            {
                                ResponseCompressed = new global::Grpc.Testing.BoolValue();
                            }
                            input.ReadMessage(ResponseCompressed);
                            break;
                        }
                    case 58:
                        {
                            if (responseStatus_ == null)
                            {
                                ResponseStatus = new global::Grpc.Testing.EchoStatus();
                            }
                            input.ReadMessage(ResponseStatus);
                            break;
                        }
                    case 66:
                        {
                            if (expectCompressed_ == null)
                            {
                                ExpectCompressed = new global::Grpc.Testing.BoolValue();
                            }
                            input.ReadMessage(ExpectCompressed);
                            break;
                        }
                    case 72:
                        {
                            FillServerId = input.ReadBool();
                            break;
                        }
                    case 80:
                        {
                            FillGrpclbRouteType = input.ReadBool();
                            break;
                        }
                }
            }
        }

        public void MergeFrom(ref CodedInputReader input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                    case 8:
                        {
                            ResponseType = (global::Grpc.Testing.PayloadType)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            ResponseSize = input.ReadInt32();
                            break;
                        }
                    case 26:
                        {
                            if (payload_ == null)
                            {
                                Payload = new global::Grpc.Testing.Payload();
                            }
                            input.ReadMessage(Payload);
                            break;
                        }
                    case 32:
                        {
                            FillUsername = input.ReadBool();
                            break;
                        }
                    case 40:
                        {
                            FillOauthScope = input.ReadBool();
                            break;
                        }
                    case 50:
                        {
                            if (responseCompressed_ == null)
                            {
                                ResponseCompressed = new global::Grpc.Testing.BoolValue();
                            }
                            input.ReadMessage(ResponseCompressed);
                            break;
                        }
                    case 58:
                        {
                            if (responseStatus_ == null)
                            {
                                ResponseStatus = new global::Grpc.Testing.EchoStatus();
                            }
                            input.ReadMessage(ResponseStatus);
                            break;
                        }
                    case 66:
                        {
                            if (expectCompressed_ == null)
                            {
                                ExpectCompressed = new global::Grpc.Testing.BoolValue();
                            }
                            input.ReadMessage(ExpectCompressed);
                            break;
                        }
                    case 72:
                        {
                            FillServerId = input.ReadBool();
                            break;
                        }
                    case 80:
                        {
                            FillGrpclbRouteType = input.ReadBool();
                            break;
                        }
                }
            }
        }
    }

    /// <summary>
    /// Unary response, as configured by the request.
    /// </summary>
    public sealed partial class SimpleResponse : pb::IMessage<SimpleResponse>, pb::IBufferMessage
    {
        private static readonly pb::MessageParser<SimpleResponse> _parser = new pb::MessageParser<SimpleResponse>(() => new SimpleResponse());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SimpleResponse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Grpc.Testing.MessagesReflection.Descriptor.MessageTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SimpleResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SimpleResponse(SimpleResponse other) : this()
        {
            payload_ = other.payload_ != null ? other.payload_.Clone() : null;
            username_ = other.username_;
            oauthScope_ = other.oauthScope_;
            serverId_ = other.serverId_;
            grpclbRouteType_ = other.grpclbRouteType_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SimpleResponse Clone()
        {
            return new SimpleResponse(this);
        }

        /// <summary>Field number for the "payload" field.</summary>
        public const int PayloadFieldNumber = 1;
        private global::Grpc.Testing.Payload payload_;
        /// <summary>
        /// Payload to increase message size.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Grpc.Testing.Payload Payload
        {
            get { return payload_; }
            set
            {
                payload_ = value;
            }
        }

        /// <summary>Field number for the "username" field.</summary>
        public const int UsernameFieldNumber = 2;
        private string username_ = "";
        /// <summary>
        /// The user the request came from, for verifying authentication was
        /// successful when the client expected it.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Username
        {
            get { return username_; }
            set
            {
                username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "oauth_scope" field.</summary>
        public const int OauthScopeFieldNumber = 3;
        private string oauthScope_ = "";
        /// <summary>
        /// OAuth scope.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string OauthScope
        {
            get { return oauthScope_; }
            set
            {
                oauthScope_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "server_id" field.</summary>
        public const int ServerIdFieldNumber = 4;
        private string serverId_ = "";
        /// <summary>
        /// Server ID. This must be unique among different server instances,
        /// but the same across all RPC's made to a particular server instance.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ServerId
        {
            get { return serverId_; }
            set
            {
                serverId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "grpclb_route_type" field.</summary>
        public const int GrpclbRouteTypeFieldNumber = 5;
        private global::Grpc.Testing.GrpclbRouteType grpclbRouteType_ = global::Grpc.Testing.GrpclbRouteType.Unknown;
        /// <summary>
        /// gRPCLB Path.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Grpc.Testing.GrpclbRouteType GrpclbRouteType
        {
            get { return grpclbRouteType_; }
            set
            {
                grpclbRouteType_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SimpleResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SimpleResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Payload, other.Payload)) return false;
            if (Username != other.Username) return false;
            if (OauthScope != other.OauthScope) return false;
            if (ServerId != other.ServerId) return false;
            if (GrpclbRouteType != other.GrpclbRouteType) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (payload_ != null) hash ^= Payload.GetHashCode();
            if (Username.Length != 0) hash ^= Username.GetHashCode();
            if (OauthScope.Length != 0) hash ^= OauthScope.GetHashCode();
            if (ServerId.Length != 0) hash ^= ServerId.GetHashCode();
            if (GrpclbRouteType != global::Grpc.Testing.GrpclbRouteType.Unknown) hash ^= GrpclbRouteType.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (payload_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Payload);
            }
            if (Username.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Username);
            }
            if (OauthScope.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(OauthScope);
            }
            if (ServerId.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(ServerId);
            }
            if (GrpclbRouteType != global::Grpc.Testing.GrpclbRouteType.Unknown)
            {
                output.WriteRawTag(40);
                output.WriteEnum((int)GrpclbRouteType);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        public void WriteTo(ref CodedOutputWriter output)
        {
            if (payload_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Payload);
            }
            if (Username.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Username);
            }
            if (OauthScope.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(OauthScope);
            }
            if (ServerId.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(ServerId);
            }
            if (GrpclbRouteType != global::Grpc.Testing.GrpclbRouteType.Unknown)
            {
                output.WriteRawTag(40);
                output.WriteEnum((int)GrpclbRouteType);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(ref output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (payload_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);
            }
            if (Username.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
            }
            if (OauthScope.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(OauthScope);
            }
            if (ServerId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerId);
            }
            if (GrpclbRouteType != global::Grpc.Testing.GrpclbRouteType.Unknown)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)GrpclbRouteType);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SimpleResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.payload_ != null)
            {
                if (payload_ == null)
                {
                    Payload = new global::Grpc.Testing.Payload();
                }
                Payload.MergeFrom(other.Payload);
            }
            if (other.Username.Length != 0)
            {
                Username = other.Username;
            }
            if (other.OauthScope.Length != 0)
            {
                OauthScope = other.OauthScope;
            }
            if (other.ServerId.Length != 0)
            {
                ServerId = other.ServerId;
            }
            if (other.GrpclbRouteType != global::Grpc.Testing.GrpclbRouteType.Unknown)
            {
                GrpclbRouteType = other.GrpclbRouteType;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (payload_ == null)
                            {
                                Payload = new global::Grpc.Testing.Payload();
                            }
                            input.ReadMessage(Payload);
                            break;
                        }
                    case 18:
                        {
                            Username = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            OauthScope = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            ServerId = input.ReadString();
                            break;
                        }
                    case 40:
                        {
                            GrpclbRouteType = (global::Grpc.Testing.GrpclbRouteType)input.ReadEnum();
                            break;
                        }
                }
            }
        }

        public void MergeFrom(ref CodedInputReader input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                    case 10:
                        {
                            if (payload_ == null)
                            {
                                Payload = new global::Grpc.Testing.Payload();
                            }
                            input.ReadMessage(Payload);
                            break;
                        }
                    case 18:
                        {
                            Username = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            OauthScope = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            ServerId = input.ReadString();
                            break;
                        }
                    case 40:
                        {
                            GrpclbRouteType = (global::Grpc.Testing.GrpclbRouteType)input.ReadEnum();
                            break;
                        }
                }
            }
        }
    }

    #endregion

}

#endregion Designer generated code
